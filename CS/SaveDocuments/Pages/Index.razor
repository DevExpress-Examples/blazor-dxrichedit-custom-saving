@page "/"

<style>
    .my-icon{
        height: 16px;
        width: 16px;
        background-image: url("/images/Save.svg");
    }
</style>

<DxRichEdit @ref="richEdit" 
            DocumentFormat="DocumentFormat.Rtf"
            @bind-DocumentContent=@documentContent
            CustomizeRibbon=OnCustomizeRibbon
            @bind-Modified=modified
            />

@code{
    DxRichEdit richEdit;
    byte[] documentContent;
    bool modified = false;

    protected override async Task OnInitializedAsync() {
        documentContent = await File.ReadAllBytesAsync("Data\\document.rtf");
        await base.OnInitializedAsync();    
    }

    async Task FinalSaveAsync() {
        richEdit.DocumentAPI.BeginUpdate();
        await richEdit.DocumentAPI.Fields.UpdateAllAsync(true);
        await InsertLogoAsync();
        await richEdit.SaveDocumentAsync();
        await richEdit.ExportDocumentAsync("Data\\document.rtf", DocumentFormat.Rtf);
        richEdit.DocumentAPI.EndUpdate();
    }

    async Task OnCustomizeRibbon(IRibbon ribbon) {
        IRibbonTab fileTab = ribbon.Tabs[RichEditRibbonTabNames.File];
        IBarGroup commonGroup = fileTab.Groups[RichEditRibbonGroupNames.FileCommon];
        commonGroup.Items.Remove(RichEditBarItemNames.SaveDocument);
        IBarButton customSaveButton = commonGroup.Items.AddCustomButton(4, "Final Save", FinalSaveAsync);
        customSaveButton.IconCssClass = "my-icon";
        customSaveButton.GetEnabled = () => modified == true;
    }

    async Task InsertLogoAsync() {
        Section section = await richEdit.DocumentAPI.Sections.GetAsync(0);
        SubDocument header = await section.GetHeaderAsync(createIfNotExist: true);
        await header.RemoveAsync(await header.GetIntervalAsync());
        using (FileStream sourceStream = File.Open("Data\\logo.png", FileMode.Open)){
            DocumentImageSource imgSource = DocumentImageSource.LoadFromStream(sourceStream, UnitConverter.PixelsToTwips(160), UnitConverter.PixelsToTwips(30));
            Image image = await header.Images.CreateAsync(0, imgSource);
            await image.ChangePropertiesAsync(ip => {
                ip.VerticalAnchorElement = FloatingObjectVerticalAnchorElement.TopMargin;
                ip.VerticalAlignment = FloatingObjectVerticalAlignment.Center;
            });
        }      
    }
}
